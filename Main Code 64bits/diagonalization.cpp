#include "diagonalization.h"
#include "laser.h"                          // for the Euler_angles

#include  <iostream>                       // to include cout, cin


// diagonalized the Hamiltionian for the current molecule its field etc.. and give the eigenvectors and eigenvalues and dipoles (in Debye) update all Level[n].Energy_cm
void Diagonalization(vector <Internal_state> &Level, const Molecule &my_mol, const Field &fieldB, const Field &fieldE,
                     FitParams &params,  SelfAdjointEigenSolver<MatrixXcd> &es,  MatrixXd d[])
{
    int nb_levels=23; //   Level.size(); 21 in our case  // TODO (Daniel#7#): I tried a dynamical size (or vector) but may be not enough and was not easily compatible with the matrix and speed. But should be tried again

    /******* ORDER OF LEVELS (the n=0 and n=1 manifold, the one for spontaneous emission, should be order in Energy) ****************

    The annihilation is treated like a spontaneous emission down to a dead level. BEcause we have states with |m|=0,1,2 we have created 3 dead levels
    with |m|=0,1 name dead_-1 dead_0 dead_1. We have create (abritrary) a pi spontaneous emission with all m=-1,0,1 and only the 3P2-2   and 3P22 are simga+ and sigma-

    For convenience we have ordered the level in energy such that the Zeeman effect keep this ordering (for very small field)
    And for degenerate levels that stay degenerate even with Zeeman effect we have added a small shift to ensure the energy ordering

    The matrix are calculated using a Mathematica code which use n S L J M_J ordering that is the most natural orderning. So we use it here.


    However the diagonalization then gives an ordering in energy that is

    dead_-1 dead_0 dead_1    n=1[  1S00     3S1-1    3S11    3S10],   N=2[  1S00    3P00   3P1-1    3P11     3P10    1P10   1P1-1    1P11   3P2-2    3P22    3P2-1   3P21   3P20     3S1-1   3S11   3S10
    [i] 0        1       2           3         4        5       6              7       8       9       10      11     12     13       14      15      16     17      18      19      20       21     22

    *************************************/


    double E0_cm[nb_levels][nb_levels] =
    {
        {-10000.000000001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, -10000.000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, -9999.9999999992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, -6.8175892660193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, -1e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 1e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 41147.812611644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 41148.056096975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.238710969, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.238710970, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.238710973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.299582304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.299582305, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.299582306, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.384802171, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.384802172, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.384802172, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.384802173, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.384802175, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.664810301, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.664810302, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41148.664810303}
    };


    /** For the Zeeman effect in cm^-1  ****/

    // Ruggero = Dermer = mine = Pauline (if (-1)^(l+s-j)(-1)^(lp+sp-jp) included)
    double Zeeman_cm_B[nb_levels][nb_levels] =
    {
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0.9337307964640155, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0.9337307964640155, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.9337307964640155},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.5390897266891428, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.6602473779824212, 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.6602473779824212, 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., -0.5390897266891428, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.7623880028197907, 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., -0.6602473779824212, 0., 0., 0., 0., 0., 0., 0., 0.6602473779824212, 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.6602473779824212, 0., 0., 0., 0., 0., 0., 0., 0.6602473779824212, 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.6602473779824212, 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.6602473779824212, 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.7623880028197907, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 0., 0., 0., 0., 0.9337307964640155, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}
    };


    /***  <i|d_q|j> in Debye is coded here as d[q+1][i][j] (real), i = line, j = column ; that is for a i<-->j transition (with E_i> E_j) ****/

    double dipole[3][nb_levels][nb_levels]=
    {
        {   {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.007877448760964387, 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -3.7868764758423907, 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., -2.1863541527154653, 0., 0., -2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., -1.5459858474604744, 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -3.7868764758423907, 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., -2.6777260355839694, 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -15.250486562036826, 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 2.1863541527154653, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 8.80487252186473, 0.},
            {0., 0., 0., 0., 0., 0., -2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -10.783722464410557},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., -2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -10.783722464410557, 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 3.7868764758423907, 0., 0., 0., 15.250486562036826, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0.007877448760964387, 0., 0., 0., 3.7868764758423907, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 15.250486562036826, 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 10.783722464410557},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 1.5459858474604744, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.2259850676936495, 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., -8.80487252186473, 0., 0., -10.783722464410557, 0., 0., 0., 0., 0., 0., 0., -6.2259850676936495, 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -15.250486562036826, 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -10.783722464410557, 0., 0., 0., 0., 0., 0., 0., -10.783722464410557, 0., 0., 0., 0.}
        },
        {   {0., 0., 0., 0., 4.7220552656855155, 0., 0., 0., 0., 0.00048814973718447113, 0., 0., 0., 0.0026750393062167006, 0., 0., 0., 0.007877448760964387, 0., 0., 0.14482997883476675, 0., 0.},
            {0., 0., 0., 159.87787069042116, 0., 0., 4.7220552656855155, 4.88155837172815, 0.015436732757477556, 0., 0., 0.00048814973718447113, 0.0026750393062167006, 0., 0., 0., 0., 0., 0., 0.007877448760964387, 0., 0., 0.14482997883476675},
            {0., 0., 0., 0., 0., 4.7220552656855155, 0., 0., 0., 0., 0.00048814973718447113, 0., 0., 0., 0.0026750393062167006, 0., 0., 0., 0.007877448760964387, 0., 0., 0.14482997883476675, 0.},
            {0., 159.87787069042116, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 3.7868764758423907, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {4.7220552656855155, 0., 0., 0., 0., 0., 0., 0., 0., 2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., 2.6777260355839694, 0., 0., 0., 0., 0.},
            {0., 0., 4.7220552656855155, 0., 0., 0., 0., 0., 0., 0., -2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., 2.6777260355839694, 0., 0., 0., 0.},
            {0., 4.7220552656855155, 0., 0., 0., 0., 0., 0., -2.1863541527154653, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 3.091971694920949, 0., 0., 0.},
            {0., 4.88155837172815, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 15.250486562036826, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0.015436732757477556, 0., 0., 0., 0., -2.1863541527154653, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -8.80487252186473},
            {0.00048814973718447113, 0., 0., 0., 2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 10.783722464410557, 0., 0.},
            {0., 0., 0.00048814973718447113, 0., 0., -2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -10.783722464410557, 0.},
            {0., 0.00048814973718447113, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0.0026750393062167006, 0., 3.7868764758423907, 0., 0., 0., 15.250486562036826, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0.0026750393062167006, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0.0026750393062167006, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0.007877448760964387, 0., 0., 0., 2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 10.783722464410557, 0., 0.},
            {0., 0., 0.007877448760964387, 0., 0., 2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 10.783722464410557, 0.},
            {0., 0.007877448760964387, 0., 0., 0., 0., 3.091971694920949, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 12.451970135387299},
            {0.14482997883476675, 0., 0., 0., 0., 0., 0., 0., 0., 10.783722464410557, 0., 0., 0., 0., 0., 0., 0., 10.783722464410557, 0., 0., 0., 0., 0.},
            {0., 0., 0.14482997883476675, 0., 0., 0., 0., 0., 0., 0., -10.783722464410557, 0., 0., 0., 0., 0., 0., 0., 10.783722464410557, 0., 0., 0., 0.},
            {0., 0.14482997883476675, 0., 0., 0., 0., 0., 0., -8.80487252186473, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 12.451970135387299, 0., 0., 0.}
        }
        ,
        {
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -0.007877448760964387, 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -3.7868764758423907, 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -3.7868764758423907, 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., -2.1863541527154653, 0., 0., 2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., -1.5459858474604744, 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., -2.6777260355839694, 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -15.250486562036826, 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 2.1863541527154653, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 8.80487252186473, 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 10.783722464410557},
            {0., 0., 0., 0., 2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 10.783722464410557, 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 3.7868764758423907, 0., 0., 0., 15.250486562036826, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0.007877448760964387, 0., 0., 3.7868764758423907, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 15.250486562036826, 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 2.6777260355839694, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 10.783722464410557},
            {0., 0., 0., 0., 1.5459858474604744, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 6.2259850676936495, 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., -15.250486562036826, 0., 0., 0., 0., 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., -8.80487252186473, 0., 0., 10.783722464410557, 0., 0., 0., 0., 0., 0., 0., -6.2259850676936495, 0., 0., 0.},
            {0., 0., 0., 0., 0., 0., 0., 0., 0., 10.783722464410557, 0., 0., 0., 0., 0., 0., 0., -10.783722464410557, 0., 0., 0., 0., 0.}
        }
    };


    /*** Pauline's one *****/

//    double dipole[3][nb_levels][nb_levels]=
//    {
//        {   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0},
//            {0, 0, 0, 0, 4.72206, 0, 0, 0, 0, 0, 0.00787745, 0, 0, 0, 0.00267504, 0, 0, 0, 0.146279, 0, 0, 0.00048815, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.14483, 0, 0, 0, 0, 0, 0},
//            {0, 0,  0, 0, 0, 0, 0, 0, 0, 0., 0, 0, 0, -3.78688, 0, 0, 0, 0., 0, 0, 0,  0, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, -2.18635, 0, 0, 2.67773, 0., 0, 0, 0, 0, 0, 0, -1.54599, 0, 0, 0},
//            {0, 4.72206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.78688, 0, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0, 0, 0,  0, 0, 0, 2.67773, 0, 0, 0, 0., 0, 0, 0, -2.67773, 0, 0, 0, 0,  0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0., 0, 0, 0, 15.2505, 0, 0, 0, 0., 0, 0, 0, 0, 0},
//            {0, 0, 0, 0, 0, 2.18635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8.80487, 0, 0},
//            {0, 0.00787745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0., 0, 0, 2.67773, 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10.7837},
//            {0, 0, 0, 0, 0, 2.67773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10.7837, 0, 0},
//            {0, 0, 0, 0, 0, 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0., 0, 0},
//            {0, 0.00048815, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 3.78688, 0, 0, 0., -15.2505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.},
//            {0.00787745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0, 3.78688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15.2505, 0},
//            {0, 0.00787745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0., 0, 0, 2.67773, 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10.7837},
//            {0, 0, 0, 0, 0, 1.54599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.22598, 0, 0},
//            {0, 0.0154367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15.2505, 0, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 8.80487, 0, 0, -10.7837, 0., 0, 0, 0, 0, 0, 0, 6.22598, 0, 0,  0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, -10.7837, 0, 0, 0, 0., 0, 0, 0, 10.7837, 0, 0, 0, 0, 0}
//        }
//        ,
//        {
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0},
//            {0, 0, 0, 159.878, 0, 0, 4.72206, 4.88156, 0.00267504, 0, 0, 0.00787745, 0.00267504, 0, 0, 0, 0, 0, 0, 0.14483, 0, 0, 0.00048815},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//            {0, 159.878, 0, 0, 0, 0, 0, 0, 0., 0, 0, 0., -3.78688, 0, 0, 0, 0, 0, 0, 0., 0, 0, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.67773, 0, 0, 0, 0., 0, 0, 0, -2.67773, 0, 0, 0, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, -2.67773, 0, 0, 0, 0., 0, 0, 0, -2.67773, 0, 0, 0, 0, 0},
//            {0, 4.72206, 0, 0, 0, 0, 0, 0, 2.18635, 0, 0, 0., 0., 0, 0, 0, 0, 0, 0, -3.09197, 0, 0, 0},
//            {0, 4.88156, 0, 0, 0, 0, 0, 0, 0., 0, 0, 0., 15.2505, 0, 0, 0, 0, 0, 0, 0., 0, 0, 0},
//            {0, 0.00267504, 0, 0., 0, 0, 2.18635, 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8.80487},
//            {0, 0, 0, 0, 0, -2.67773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.7837, 0, 0},
//            {0, 0, 0, 0, 2.67773, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10.7837, 0},
//            {0, 0.00787745, 0, 0., 0, 0, 0., 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.},
//            {0, 0.00267504, 0, -3.78688, 0, 0, 0., 15.2505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.},
//            {0, 0, 0, 0, 0, 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0., 0, 0},
//            {0, 0, 0, 0, 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0., 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0, 0, -2.67773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.7837, 0, 0},
//            {0, 0, 0, 0, -2.67773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.7837, 0},
//            {0, 0.14483, 0, 0., 0, 0, -3.09197, 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12.452},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 10.7837, 0, 0, 0, 0., 0, 0, 0, 10.7837, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10.7837, 0, 0, 0, 0., 0, 0, 0, 10.7837, 0, 0, 0, 0},
//            {0, 0.00048815, 0, 0, 0, 0, 0, 0, -8.80487, 0, 0, 0., 0., 0, 0, 0, 0, 0, 0, 12.452, 0, 0, 0}
//
//        }
//        ,
//        {
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.00787745, 0, 0, 0, 0,  0, 0, 0},
//            {0, 0, 0, 0, 0, 4.72206, 0, 0, 0, 0.00787745, 0, 0, 0, 0.00048815, 0, 0, 0, 0.00787745, 0, 0, 0.0154367, 0, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0., 0, 0, 0, -3.78688, 0, 0, 0, 0., 0, 0, 0, 0},
//            {0, 4.72206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.78688, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, -2.18635, 0, 0, -2.67773, 0., 0, 0, 0, 0, 0, 0, -1.54599, 0, 0, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.67773, 0, 0, 0, 0., 0, 0, 0, -2.67773, 0, 0, 0, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0., 0, 0, 0, 15.2505, 0, 0, 0, 0., 0, 0, 0, 0}, {0, 0, 0, 0, 2.18635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8.80487, 0},
//            {0, 0, 0, 0., 0, 0, -2.67773, 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.7837},
//            {0, 0.00787745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0, -2.67773, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.7837, 0},
//            {0, 0, 0, 0, 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0., 0},
//            {0, 0, 0, 3.78688, 0, 0, 0., -15.2505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.},
//            {0, 0.00267504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0, 0, 3.78688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15.2505, 0, 0},
//            {0, 0, 0.14483, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0., 0, 0, 2.67773, 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10.7837},
//            {0, 0.146279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0, 1.54599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.22598, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 8.80487, 0, 0, 10.7837, 0., 0, 0, 0, 0, 0, 0, 6.22598, 0, 0, 0},
//            {0, 0.00048815, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15.2505, 0, 0, 0, 0, 0, 0},
//            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.7837, 0, 0, 0, 0., 0, 0, 0, 10.7837, 0, 0,  0, 0}
//        }
//    };


// For small sizes, especially for sizes smaller than (roughly) 16, using fixed sizes is hugely beneficial to performance, as it allows Eigen to avoid dynamic
// So here I use fixed size
// Furthermore it seems that using dynamical and MatrixXcd (not with MatrixXd for H) create a memory problem!!

    /*** dipole matrix element ***/
    MatrixXd d0[3]; // d0 = matrix dipole in zero field
    d0[0] = MatrixXd(23,23);
    d0[1] = MatrixXd(23,23);
    d0[2] = MatrixXd(23,23);
    for (int i=0; i<nb_levels; i++)
        for (int j=0; j<nb_levels; j++)
        {
            for(int n_polar = -1; n_polar <= 1; n_polar++)
            {
                d0[n_polar+1](i,j)= dipole[n_polar+1][i][j]; // d0[q+1]_ij = 0_<i | d_q | j>_0   (i = out and j = in)
                // cout << "polar " << n_polar << " i  "  << i  << " j " << j  << " d " <<  d0[n_polar+1](i,j) << endl;
            }
        }


    /*** Hamiltonian matrix element: Zeeman + Stark (External field + Dynamical Stark) ***/
    MatrixXcd H(23,23); // Hamiltonian Matrix. It is an hermitian matrix so I use complex not MatrixXd

    Vecteur3D r,v,B,F,dip_ij;
    r = my_mol.get_pos();
    v = my_mol.get_vel();
    B = fieldB.get_Field(r); // I neglect the dynamical modification of B field for v << c cf https://en.wikipedia.org/wiki/Classical_electromagnetism_and_special_relativity
    F = fieldE.get_Field(r) + v.cross(B); // External field + Dynamical Stark, noted F to avoid confusion with E = Energy
    complex<double> d_dot_F;

    // Hamiltonian. We assume here an adiabatic following of the state and so that their quantization axis is the B axis
    for (int i=0; i<nb_levels; i++)
        for (int j=0; j<nb_levels; j++)
        {
            dip_ij = Vecteur3D(dipole[0][i][j],dipole[1][i][j],dipole[2][i][j])*Debye/(100.*hPlanck*C); // (to have the dipole such that d.F in cm^-1)
            dipole_dot_Electric_Ffield(dip_ij, B, F, d_dot_F); // Hamiltonian Stark = - d.F = +e r.F
            /**** SIGN TO BE CHECKED - d.F = +e r.F ***/
            H(i,j)=  E0_cm[i][j] + B.mag()*Zeeman_cm_B[i][j] + d_dot_F; // H_ij = 0_<i | H | j>_0 = 0_<j | H | i>_0  (cf Eq (3) of Dermer PRA 40, 5526 (1989)

//           cout << " i,j " << i <<  " " << j << "   " << E0_cm[i][j] << " " << Zeeman_cm_B[i][j] << "  "  << Stark_cm_Bv[i][j] << endl;
        }

    /*** diagonalization: gives new eigen energies (in Level[n].Energy_cm) and eigen vectors  ***/

    es.compute(H);  // calculate the new eigenvectors |i> (i start from 0)  and new eingen_Energies
    // E_i = es.eigenvalues()(i) (in incresing order)
    // es.eigenvectors()(i,j) = 0<i | j>  gives (i=line, j = column index) the new (column) vector |j> in function of the old |i>_0

    for( int n = 0; n < nb_levels; n++ )
    {
        Level[n].Energy_cm = es.eigenvalues()(n);
    }


    /**** calcul of the new dipoles (in Debye) in d[q] ***/

    for(int n_polar = -1; n_polar <= 1; n_polar++)
    {
        d[n_polar+1] = ( (es.eigenvectors().adjoint())*d0[n_polar+1]*(es.eigenvectors()) ).real(); // The results is real but it is coded in complex number so I take the real part

        // evec = es.eigenvectors() verifie evec(j0,j) = 0<j0 | j>  gives (j0=line, j = column index) the new (column) vector |j> in function of the old |j0>_0
        //  d0[q+1]_i0 j0 = 0_<i0 | d_q | j0>_0 . So d[q+1]_ij = <i | d_q | j> = Sum i0,j0   <i |i0>0 0<i0| d_q | j0>0 0<j0|j> =  Sum i0,j0  evec^dag (i,i0)  d_q(i0,j0)  evec(j0,j)
        // The new dipole are given by d[polar] = evec^dag.d0[polar].evec =  <i | d_q | j> with evec_j = |j> = sum_|j>_0   0_<j| j>.
    }

    H.resize(0,0);
    d0[0].resize(0,0);
    d0[1].resize(0,0);
    d0[2].resize(0,0);
}


//   d.E (for the Stark effect that is -d.E)
// where the dipole  vector d= sum_p d_p e^p is given in the local quantification axis (typically the magnetic field)
void dipole_dot_Electric_Ffield (const Vecteur3D& dipole, const Vecteur3D& axe_quant,  const Vecteur3D& E, complex<double> &d_dot_E)
{
    double dp,d0,dm;
    dm = dipole(0);
    d0 = dipole(1);
    dp = dipole(2);

    Vecteur3D Euler_angles_axe_quant = Euler_angles(axe_quant);
    Vecteur3D Euler_angles_axe_electric_field = Euler_angles(E);

// The link between the polar angles (theta, phi) and the Euler angle (alpha, beta, gamma) in ZXZ convention as we used them (Wikipedia)  are
    // alpha= phi +pi/2; beta = theta; gamma = -pi/2
    double phi_F = Euler_angles_axe_quant(0) - pi/2.; // polar angle for the quantization axis
    double theta_F = Euler_angles_axe_quant(1); // polar angle for the quantization axis
    double phi_k = Euler_angles_axe_electric_field(0) - pi/2.; // polar angle for the electric field axis (along the vector E)
    double theta_k = Euler_angles_axe_electric_field(1); // polar angle for the electric field axis (along the vector E)


    complex<double> twice_dip; // Twice the dipole
    const complex<double> i(0., 1.);

    /*** We try to optimize the calcul so to reduce at maximmum the numebr of operations ****/

    double sin_theta_k = sin(theta_k); // The notation k is used here because this is the notation for a field as if it was a laser propagating along k with a polarization along k by a laser (cf effectif_dipole_local() function)
    double sin_theta_F = sin(theta_F);
    double cos_theta_k = cos(theta_k);
    double cos_theta_F = cos(theta_F);
    double cos_phi_F_minus_phi_k = cos(phi_F-phi_k);
    double sin_phi_F_minus_phi_k = sin(phi_F-phi_k);

    double sqrt2 = sqrt(2.);

    double dp_minus_dm = dp-dm;
    double dp_plus_dm = dp+dm;

    twice_dip  = cos_theta_k*(2.*d0*cos_theta_F + sqrt2*dp_minus_dm*sin_theta_F)+
                 sin_theta_k*(-sqrt2*dp_minus_dm*cos_theta_F*cos_phi_F_minus_phi_k+
                              2.*d0*cos_phi_F_minus_phi_k*sin_theta_F - i*sqrt2*dp_plus_dm*sin_phi_F_minus_phi_k);

    d_dot_E = E.mag() * twice_dip/2.;
}

